apiVersionOverrides:
  cloudgoogle: ""
applicationSet:
  affinity: {}
  args: {}
  certificate:
    additionalHosts: []
    annotations: {}
    domain: argocd.example.com
    duration: ""
    enabled: false
    issuer:
      group: ""
      kind: ""
      name: ""
    privateKey:
      algorithm: RSA
      encoding: PKCS1
      rotationPolicy: Never
      size: 2048
    renewBefore: ""
    secretName: argocd-application-controller-tls
  containerPorts:
    metrics: 8080
    probe: 8081
    webhook: 7000
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  deploymentAnnotations: {}
  deploymentStrategy: {}
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  enabled: true
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    imagePullPolicy: ""
    repository: ""
    tag: ""
  imagePullSecrets: []
  initContainers: []
  livenessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  metrics:
    enabled: false
    service:
      annotations: {}
      clusterIP: ""
      labels: {}
      portName: http-metrics
      servicePort: 8080
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      annotations: {}
      enabled: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scheme: ""
      selector: {}
      tlsConfig: {}
  name: applicationset-controller
  nodeSelector: {}
  pdb:
    annotations: {}
    enabled: false
    labels: {}
    maxUnavailable: ""
    minAvailable: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  readinessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  replicas: 1
  resources: {}
  service:
    annotations: {}
    labels: {}
    port: 7000
    portName: webhook
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    labels: {}
    name: argocd-applicationset-controller
  tolerations: []
  topologySpreadConstraints: []
  webhook:
    ingress:
      annotations: {}
      enabled: false
      extraPaths: []
      hosts: []
      ingressClassName: ""
      labels: {}
      pathType: Prefix
      paths:
      - /api/webhook
      tls: []
configs:
  clusterCredentials: []
  cm:
    admin.enabled: true
    annotations: {}
    application.instanceLabelKey: argocd.argoproj.io/instance
    create: true
    exec.enabled: false
    server.rbac.log.enforce.enable: false
    timeout.hard.reconciliation: 0s
    timeout.reconciliation: 180s
    url: ""
  cmp:
    annotations: {}
    create: false
    plugins: {}
  credentialTemplates: {}
  credentialTemplatesAnnotations: {}
  gpg:
    annotations: {}
    keys: {}
  params:
    annotations: {}
    applicationsetcontroller.enable.progressive.syncs: false
    applicationsetcontroller.policy: sync
    controller.operation.processors: 10
    controller.repo.server.timeout.seconds: 60
    controller.self.heal.timeout.seconds: 5
    controller.status.processors: 20
    create: true
    otlp.address: ""
    reposerver.parallelism.limit: 0
    server.basehref: /
    server.disable.auth: false
    server.enable.gzip: true
    server.insecure: false
    server.rootpath: ""
    server.staticassets: /shared/app
    server.x.frame.options: sameorigin
  rbac:
    annotations: {}
    create: true
    policy.csv: ""
    policy.default: ""
    scopes: '[groups]'
  repositories: {}
  repositoriesAnnotations: {}
  secret:
    annotations: {}
    argocdServerAdminPassword: ""
    argocdServerAdminPasswordMtime: ""
    bitbucketServerSecret: ""
    bitbucketUUID: ""
    createSecret: true
    extra: {}
    githubSecret: ""
    gitlabSecret: ""
    gogsSecret: ""
    labels: {}
  ssh:
    annotations: {}
    extraHosts: ""
    knownHosts: |
      [ssh.github.com]:443 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
      [ssh.github.com]:443 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
      [ssh.github.com]:443 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
      bitbucket.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPIQmuzMBuKdWeF4+a2sjSSpBK0iqitSQ+5BM9KhpexuGt20JpTVM7u5BDZngncgrqDMbWdxMWWOGtZ9UgbqgZE=
      bitbucket.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIazEu89wgQZ4bqs3d63QSMzYVa0MuJ2e2gKTKqu+UUO
      bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
      github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
      github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
      github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
      gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
      gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
      gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
      ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
      vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
  styles: ""
  tls:
    annotations: {}
    certificates: {}
controller:
  affinity: {}
  args: {}
  clusterRoleRules:
    enabled: false
    rules: []
  containerPorts:
    metrics: 8082
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  env: []
  envFrom: []
  extraArgs: []
  extraContainers: []
  hostNetwork: false
  image:
    imagePullPolicy: ""
    repository: ""
    tag: ""
  imagePullSecrets: []
  initContainers: []
  metrics:
    applicationLabels:
      enabled: false
      labels: []
    enabled: false
    rules:
      additionalLabels: {}
      annotations: {}
      enabled: false
      namespace: ""
      selector: {}
      spec: []
    service:
      annotations: {}
      clusterIP: ""
      labels: {}
      portName: http-metrics
      servicePort: 8082
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      annotations: {}
      enabled: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scheme: ""
      selector: {}
      tlsConfig: {}
  name: application-controller
  nodeSelector: {}
  pdb:
    annotations: {}
    enabled: false
    labels: {}
    maxUnavailable: ""
    minAvailable: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  replicas: 1
  resources: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    labels: {}
    name: argocd-application-controller
  statefulsetAnnotations: {}
  tolerations: []
  topologySpreadConstraints: []
  volumeMounts: []
  volumes: []
crds:
  additionalLabels: {}
  annotations: {}
  install: true
  keep: true
createAggregateRoles: false
createClusterRoles: true
dex:
  affinity: {}
  certificateSecret:
    annotations: {}
    ca: ""
    crt: ""
    enabled: false
    key: ""
    labels: {}
  containerPorts:
    grpc: 5557
    http: 5556
    metrics: 5558
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  deploymentAnnotations: {}
  deploymentStrategy: {}
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  enabled: true
  env: []
  envFrom: []
  extraArgs: []
  extraContainers: []
  image:
    imagePullPolicy: ""
    repository: ghcr.io/dexidp/dex
    tag: v2.37.0
  imagePullSecrets: []
  initContainers: []
  initImage:
    imagePullPolicy: ""
    repository: ""
    resources: {}
    tag: ""
  livenessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  logFormat: ""
  logLevel: ""
  metrics:
    enabled: false
    service:
      annotations: {}
      labels: {}
      portName: http-metrics
    serviceMonitor:
      additionalLabels: {}
      annotations: {}
      enabled: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scheme: ""
      selector: {}
      tlsConfig: {}
  name: dex-server
  nodeSelector: {}
  pdb:
    annotations: {}
    enabled: false
    labels: {}
    maxUnavailable: ""
    minAvailable: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  readinessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  resources: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: argocd-dex-server
  servicePortGrpc: 5557
  servicePortGrpcName: grpc
  servicePortHttp: 5556
  servicePortHttpName: http
  servicePortMetrics: 5558
  tolerations: []
  topologySpreadConstraints: []
  volumeMounts: []
  volumes: []
externalRedis:
  existingSecret: ""
  host: ""
  password: ""
  port: 6379
  secretAnnotations: {}
  username: ""
extraObjects: []
fullnameOverride: ""
global:
  addPrometheusAnnotations: false
  additionalLabels: {}
  affinity:
    nodeAffinity:
      matchExpressions: []
      type: hard
    podAntiAffinity: soft
  certificateAnnotations: {}
  deploymentAnnotations: {}
  deploymentStrategy: {}
  env: []
  hostAliases: []
  image:
    imagePullPolicy: IfNotPresent
    repository: quay.io/argoproj/argocd
    tag: ""
  imagePullSecrets: []
  logging:
    format: text
    level: info
  networkPolicy:
    create: false
    defaultDenyIngress: false
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  revisionHistoryLimit: 3
  securityContext: {}
  statefulsetAnnotations: {}
  tolerations: []
  topologySpreadConstraints: []
kubeVersionOverride: ""
nameOverride: argocd
notifications:
  affinity: {}
  argocdUrl: null
  cm:
    create: true
  containerPorts:
    metrics: 9001
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  context: {}
  deploymentAnnotations: {}
  deploymentStrategy:
    type: Recreate
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  enabled: true
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    imagePullPolicy: ""
    repository: ""
    tag: ""
  imagePullSecrets: []
  initContainers: []
  logFormat: ""
  logLevel: ""
  metrics:
    enabled: false
    port: 9001
    service:
      annotations: {}
      clusterIP: ""
      labels: {}
      portName: http-metrics
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      annotations: {}
      enabled: false
      metricRelabelings: []
      relabelings: []
      scheme: ""
      selector: {}
      tlsConfig: {}
  name: notifications-controller
  nodeSelector: {}
  notifiers: {}
  pdb:
    annotations: {}
    enabled: false
    labels: {}
    maxUnavailable: ""
    minAvailable: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  resources: {}
  secret:
    annotations: {}
    create: true
    items: {}
    labels: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    labels: {}
    name: argocd-notifications-controller
  subscriptions: []
  templates: {}
  tolerations: []
  topologySpreadConstraints: []
  triggers: {}
openshift:
  enabled: false
redis:
  affinity: {}
  containerPorts:
    metrics: 9121
    redis: 6379
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  deploymentAnnotations: {}
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  enabled: true
  env: []
  envFrom: []
  exporter:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    enabled: false
    env: []
    image:
      imagePullPolicy: ""
      repository: public.ecr.aws/bitnami/redis-exporter
      tag: 1.53.0
    resources: {}
  extraArgs: []
  extraContainers: []
  image:
    imagePullPolicy: ""
    repository: public.ecr.aws/docker/library/redis
    tag: 7.0.13-alpine
  imagePullSecrets: []
  initContainers: []
  metrics:
    enabled: false
    service:
      annotations: {}
      clusterIP: None
      labels: {}
      portName: http-metrics
      servicePort: 9121
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      annotations: {}
      enabled: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scheme: ""
      selector: {}
      tlsConfig: {}
  name: redis
  nodeSelector: {}
  pdb:
    annotations: {}
    enabled: false
    labels: {}
    maxUnavailable: ""
    minAvailable: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  resources: {}
  securityContext:
    runAsNonRoot: true
    runAsUser: 999
    seccompProfile:
      type: RuntimeDefault
  service:
    annotations: {}
    labels: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    create: false
    name: ""
  servicePort: 6379
  tolerations: []
  topologySpreadConstraints: []
  volumeMounts: []
  volumes: []
redis-ha:
  additionalAffinities: {}
  affinity: ""
  auth: false
  authKey: auth
  configmap:
    labels: {}
  configmapTest:
    image:
      repository: koalaman/shellcheck
      tag: v0.5.0
    resources: {}
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
    seccompProfile:
      type: RuntimeDefault
  emptyDir: {}
  enabled: false
  exporter:
    address: localhost
    enabled: false
    extraArgs: {}
    image: public.ecr.aws/bitnami/redis-exporter
    livenessProbe:
      initialDelaySeconds: 15
      periodSeconds: 15
      timeoutSeconds: 3
    port: 9121
    portName: exporter-port
    pullPolicy: IfNotPresent
    readinessProbe:
      initialDelaySeconds: 15
      periodSeconds: 15
      successThreshold: 2
      timeoutSeconds: 3
    resources: {}
    scrapePath: /metrics
    serviceMonitor:
      enabled: false
    tag: 1.53.0
  extraContainers: []
  extraInitContainers: []
  extraLabels: {}
  extraVolumes: []
  global:
    addPrometheusAnnotations: false
    additionalLabels: {}
    affinity:
      nodeAffinity:
        matchExpressions: []
        type: hard
      podAntiAffinity: soft
    certificateAnnotations: {}
    deploymentAnnotations: {}
    deploymentStrategy: {}
    env: []
    hostAliases: []
    image:
      imagePullPolicy: IfNotPresent
      repository: quay.io/argoproj/argocd
      tag: ""
    imagePullSecrets: []
    logging:
      format: text
      level: info
    networkPolicy:
      create: false
      defaultDenyIngress: false
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    priorityClassName: ""
    revisionHistoryLimit: 3
    securityContext: {}
    statefulsetAnnotations: {}
    tolerations: []
    topologySpreadConstraints: []
  haproxy:
    IPv6:
      enabled: true
    additionalAffinities: {}
    affinity: ""
    annotations: {}
    checkFall: 1
    checkInterval: 1s
    containerPort: 6379
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    emptyDir: {}
    enabled: true
    hardAntiAffinity: true
    image:
      pullPolicy: IfNotPresent
      repository: haproxy
      tag: 2.6.9
    imagePullSecrets: []
    init:
      resources: {}
    labels: {}
    lifecycle: {}
    metrics:
      enabled: true
      port: 9101
      portName: http-exporter-port
      scrapePath: /metrics
      serviceMonitor:
        enabled: false
    podDisruptionBudget: {}
    readOnly:
      enabled: false
      port: 6380
    replicas: 3
    resources: {}
    securityContext:
      fsGroup: 99
      runAsNonRoot: true
      runAsUser: 99
    service:
      annotations: null
      labels: {}
      loadBalancerIP: null
      type: ClusterIP
    serviceAccount:
      create: true
    serviceAccountName: redis-sa
    servicePort: 6379
    stickyBalancing: false
    tests:
      resources: {}
    timeout:
      check: 2s
      client: 330s
      connect: 4s
      server: 330s
    tls:
      certMountPath: /tmp/
      enabled: false
      keyName: null
      secretName: ""
    tolerations: []
  hardAntiAffinity: true
  hostPath:
    chown: true
  image:
    pullPolicy: IfNotPresent
    repository: redis
    tag: 7.0.13-alpine
  imagePullSecrets: []
  init:
    resources: {}
  labels: {}
  networkPolicy:
    annotations: {}
    egressRules: []
    enabled: false
    ingressRules: []
    labels: {}
  nodeSelector: {}
  persistentVolume:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: false
    labels: {}
    size: 10Gi
  podDisruptionBudget: {}
  podManagementPolicy: OrderedReady
  prometheusRule:
    additionalLabels: {}
    enabled: false
    interval: 10s
    namespace: null
    rules: []
  rbac:
    create: true
  redis:
    annotations: {}
    config:
      maxmemory: "0"
      maxmemory-policy: volatile-lru
      min-replicas-max-lag: 5
      min-replicas-to-write: 1
      rdbchecksum: "yes"
      rdbcompression: "yes"
      repl-diskless-sync: "yes"
      save: '""'
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    extraVolumeMounts: []
    lifecycle:
      preStop:
        exec:
          command:
          - /bin/sh
          - /readonly-config/trigger-failover-if-master.sh
    livenessProbe:
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 15
    masterGroupName: argocd
    port: 6379
    readinessProbe:
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 15
    resources: {}
    terminationGracePeriodSeconds: 60
    updateStrategy:
      type: RollingUpdate
  replicas: 3
  restore:
    existingSecret: false
    s3:
      access_key: ""
      region: ""
      secret_key: ""
      source: false
    ssh:
      key: ""
      source: false
    timeout: 600
  ro_replicas: ""
  securityContext:
    fsGroup: 1000
    runAsNonRoot: true
    runAsUser: 1000
  sentinel:
    auth: false
    authKey: sentinel-password
    config:
      down-after-milliseconds: 10000
      failover-timeout: 180000
      maxclients: 10000
      parallel-syncs: 5
    extraVolumeMounts: []
    lifecycle: {}
    livenessProbe:
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 15
    port: 26379
    quorum: 2
    readinessProbe:
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 3
      timeoutSeconds: 15
    resources: {}
  serviceAccount:
    automountToken: false
    create: true
  serviceLabels: {}
  splitBrainDetection:
    interval: 60
    resources: {}
  sysctlImage:
    command: []
    enabled: false
    mountHostSys: false
    pullPolicy: Always
    registry: docker.io
    repository: busybox
    resources: {}
    tag: 1.34.1
  tls:
    caCertFile: ca.crt
    certFile: redis.crt
    keyFile: redis.key
  tolerations: []
  topologySpreadConstraints:
    enabled: false
    maxSkew: ""
    topologyKey: ""
    whenUnsatisfiable: ""
repoServer:
  affinity: {}
  autoscaling:
    behavior: {}
    enabled: false
    maxReplicas: 5
    metrics: []
    minReplicas: 1
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
  certificateSecret:
    annotations: {}
    ca: ""
    crt: ""
    enabled: false
    key: ""
    labels: {}
  clusterRoleRules:
    enabled: false
    rules: []
  containerPorts:
    metrics: 8084
    server: 8081
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  deploymentAnnotations: {}
  deploymentStrategy: {}
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  env: []
  envFrom: []
  extraArgs: []
  extraContainers: []
  hostNetwork: false
  image:
    imagePullPolicy: ""
    repository: ""
    tag: ""
  imagePullSecrets: []
  initContainers: []
  lifecycle: {}
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  metrics:
    enabled: false
    service:
      annotations: {}
      clusterIP: ""
      labels: {}
      portName: http-metrics
      servicePort: 8084
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      annotations: {}
      enabled: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scheme: ""
      selector: {}
      tlsConfig: {}
  name: repo-server
  nodeSelector: {}
  pdb:
    annotations: {}
    enabled: false
    labels: {}
    maxUnavailable: ""
    minAvailable: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  rbac: []
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  replicas: 1
  resources: {}
  service:
    annotations: {}
    labels: {}
    port: 8081
    portName: https-repo-server
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    labels: {}
    name: ""
  tolerations: []
  topologySpreadConstraints: []
  useEphemeralHelmWorkingDir: true
  volumeMounts: []
  volumes: []
server:
  GKEbackendConfig:
    enabled: false
    spec: {}
  GKEfrontendConfig:
    enabled: false
    spec: {}
  GKEmanagedCertificate:
    domains:
    - argocd.example.com
    enabled: false
  affinity: {}
  autoscaling:
    behavior: {}
    enabled: false
    maxReplicas: 5
    metrics: []
    minReplicas: 1
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
  certificate:
    additionalHosts: []
    annotations: {}
    domain: argocd.example.com
    duration: ""
    enabled: false
    issuer:
      group: ""
      kind: ""
      name: ""
    privateKey:
      algorithm: RSA
      encoding: PKCS1
      rotationPolicy: Never
      size: 2048
    renewBefore: ""
    secretName: argocd-server-tls
    usages: []
  certificateSecret:
    annotations: {}
    crt: ""
    enabled: false
    key: ""
    labels: {}
  containerPorts:
    metrics: 8083
    server: 8080
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  deploymentAnnotations: {}
  deploymentStrategy: {}
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  env: []
  envFrom: []
  extensions:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    enabled: false
    image:
      imagePullPolicy: ""
      repository: ghcr.io/argoproj-labs/argocd-extensions
      tag: v0.2.1
    resources: {}
  extraArgs: []
  extraContainers: []
  hostNetwork: false
  image:
    imagePullPolicy: ""
    repository: ""
    tag: ""
  imagePullSecrets: []
  ingress:
    annotations: {}
    enabled: false
    extraPaths: []
    hosts: []
    https: false
    ingressClassName: ""
    labels: {}
    pathType: Prefix
    paths:
    - /
    tls: []
  ingressGrpc:
    annotations: {}
    awsALB:
      backendProtocolVersion: HTTP2
      serviceType: NodePort
    enabled: false
    extraPaths: []
    hosts: []
    https: false
    ingressClassName: ""
    isAWSALB: false
    labels: {}
    pathType: Prefix
    paths:
    - /
    tls: []
  initContainers: []
  lifecycle: {}
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  metrics:
    enabled: false
    service:
      annotations: {}
      clusterIP: ""
      labels: {}
      portName: http-metrics
      servicePort: 8083
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      annotations: {}
      enabled: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scheme: ""
      selector: {}
      tlsConfig: {}
  name: server
  nodeSelector: {}
  pdb:
    annotations: {}
    enabled: false
    labels: {}
    maxUnavailable: ""
    minAvailable: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  replicas: 1
  resources: {}
  route:
    annotations: {}
    enabled: false
    hostname: ""
    termination_policy: None
    termination_type: passthrough
  service:
    annotations:
      # service.beta.kubernetes.io/aws-load-balancer-type: nlb
      # service.beta.kubernetes.io/aws-load-balancer-internal: "true"
      # service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
      # service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "300"
      # service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
      # service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "true"
      # service.beta.kubernetes.io/aws-load-balancer-access-log-emit-interval: "60"
      # service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-name: "ahli-soc"
      # service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-prefix: "developerportal/dev/argoCD" 
      # service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:eu-central-1:745311432246:certificate/c59c590c-9950-4dde-bc04-77ba129895e3"
      # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "https"
      # service.beta.kubernetes.io/aws-load-balancer-subnets: subnet-08e5c7e8b68f8cc3f,subnet-0e11e0054f138a502,subnet-0f3725a66510b2c42
    externalIPs: []
    externalTrafficPolicy: ""
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePortHttp: 30080
    nodePortHttps: 30443
    servicePortHttp: 80
    servicePortHttpName: http
    servicePortHttps: 443
    servicePortHttpsName: https
    sessionAffinity: ""
    type: LoadBalancer
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    labels: {}
    name: argocd-server
  tolerations: []
  topologySpreadConstraints: []
  volumeMounts: []
  volumes: []
